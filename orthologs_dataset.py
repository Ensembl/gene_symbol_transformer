# See the NOTICE file distributed with this work for additional information
# regarding copyright ownership.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


"""
Generate groups of orthologs generated by Compara.
"""


# standard library imports

# third party imports
import networkx as nx
import pandas as pd

# project imports
from utils import data_directory


def save_light_orthologs_csv():
    """
    Save a CSV containing just the gene and protein IDs from the original data file.
    """
    original_data_file_path = (
        data_directory / "primates_orthologs_one2one_w_perc_id.txt"
    )
    print(f"loading {original_data_file_path} ...")
    data = pd.read_csv(original_data_file_path, sep="\t")

    columns = [
        "gene1_stable_id",
        "protein1_stable_id",
        "gene2_stable_id",
        "protein2_stable_id",
    ]
    data = data[columns]

    light_orthologs_csv_path = original_data_file_path.parent / "primates_orthologs.csv"
    print(f"saving {light_orthologs_csv_path} ...")
    data.to_csv(light_orthologs_csv_path, sep="\t", index=False)
    print(f"light orthologs CSV saved at {light_orthologs_csv_path}")


def generate_ortholog_groups():
    """
    Generate ortholog groups.

    Representing the one-to-one ortholog relations as the edges of a graph with
    the genes as its nodes, we can compute the (connected) components of the graph.
    The elements of these subgraphs are members of disjoint sets, which are
    the desired ortholog groups.
    """
    # data_file_path = data_directory / "primates_orthologs_one2one_w_perc_id.txt"
    # data_file_path = data_directory / "primates_orthologs.csv"
    data_file_path = data_directory / "primates_orthologs_dev.csv"
    print(f"loading {data_file_path} ...")
    data = pd.read_csv(data_file_path, sep="\t")

    graph = nx.Graph(list(zip(data["gene1_stable_id"], data["gene2_stable_id"])))

    # orthologs disjoint sets
    ortholog_groups = [tuple(c) for c in nx.connected_components(graph)]

    # sort ortholog groups internally and then globally on first and then second ortholog
    ortholog_groups = [tuple(sorted(og)) for og in ortholog_groups]

    ortholog_groups = sorted(ortholog_groups, key=lambda x: (x[0], x[1]))

    return ortholog_groups


def save_ortholog_groups():
    """
    Save ortholog groups to a text file. Each group is saved on a separate line with
    ortholog names joined into a comma separated string.
    """
    ortholog_groups = generate_ortholog_groups()

    ortholog_groups_path = data_directory / "ortholog_groups.txt"
    with open(ortholog_groups_path, "w+") as og_file:
        for og in ortholog_groups:
            og_string = str.join(",", og)
            og_file.write(og_string + "\n")
    ortholog_groups_path = data_directory / "ortholog_groups.txt"
    print(f"ortholog groups saved at {ortholog_groups_path}")


def main():
    """
    main function
    """
    # save_light_orthologs_csv()

    # generate_ortholog_groups()

    save_ortholog_groups()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("Interrupted with CTRL-C, exiting...")
